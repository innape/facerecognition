{"version":3,"sources":["components/FaceRecognition/FaceRecognition.js","components/Navigation/Navigation.js","components/Signin/Signin.js","components/Register/Register.js","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js","components/Logo/brain.png"],"names":["FaceRecognition","imageUrl","box","className","id","alt","src","width","height","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Navigation","onRouteChange","isSignedIn","display","justifyContent","onClick","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","this","htmlFor","type","name","onChange","React","Component","Register","onNameChange","Logo","options","max","paddingTop","brain","ImageLinkForm","onInputChange","onButtonSubmit","Rank","entries","particlesOptions","particles","number","density","enable","value_area","initialState","input","route","joined","App","data","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","count","Object","assign","catch","console","log","err","params","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.75eb54da.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FaceRecognition.css';\r\n\r\nconst FaceRecognition = ({ imageUrl, box }) => {\r\n\treturn (\r\n\t\t<div className='center ma'>\r\n\t\t\t<div className='absolute mt2'>\r\n\t\t\t<img id='inputimage' alt='' src={imageUrl} width='500px' height='auto'/>\r\n\t\t\t<div className='bounding-box' style={{top: box.topRow, right: box.rightCol, bottom: box.bottomRow, left: box.leftCol}}></div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default FaceRecognition;","import React from 'react';\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn}) => {\r\n\t\r\n\t\tif(isSignedIn) {\r\n\t\t\treturn (\r\n\t\t\t\t<nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n\t\t\t\t\t<p onClick={() =>onRouteChange('signout')} className='f3 link dim black underline pa3 pointer'>Sign out</p>\r\n\t\t\t\t</nav>\t\r\n\t\t\t);\t\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n\t\t\t\t\t<p onClick={() =>onRouteChange('signin')} className='f3 link dim black underline pa3 pointer'>Sign In</p>\r\n\t\t\t\t\t<p onClick={() =>onRouteChange('register')} className='f3 link dim black underline pa3 pointer'>Register</p>\r\n\t\t\t\t</nav>\r\n\t\t\t);\t\t\r\n\t\t}\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nclass Signin extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      signInEmail: '',\r\n      signInPassword: ''\r\n    }\r\n  }\r\n\r\n  onEmailChange = (event) => {\r\n    this.setState({signInEmail: event.target.value})\r\n  }\r\n\r\n  onPasswordChange = (event) => {\r\n    this.setState({signInPassword: event.target.value})\r\n  }\r\n\r\n  onSubmitSignIn = () => {\r\n    fetch('https://radiant-sierra-05045.herokuapp.com/signin', {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        email: this.state.signInEmail,\r\n        password: this.state.signInPassword\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(user => {\r\n        if (user.id) {\r\n          this.props.loadUser(user)\r\n          this.props.onRouteChange('home');\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { onRouteChange } = this.props;\r\n    return (\r\n      <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n        <main className=\"pa4 black-80\">\r\n          <div className=\"measure\">\r\n            <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n              <legend className=\"f1 fw6 ph0 mh0\">Sign In</legend>\r\n              <div className=\"mt3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n                <input\r\n                  className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"email\"\r\n                  name=\"email-address\"\r\n                  id=\"email-address\"\r\n                  onChange={this.onEmailChange}\r\n                />\r\n              </div>\r\n              <div className=\"mv3\">\r\n                <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n                <input\r\n                  className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\"\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n              </div>\r\n            </fieldset>\r\n            <div className=\"\">\r\n              <input\r\n                onClick={this.onSubmitSignIn}\r\n                className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\"\r\n                type=\"submit\"\r\n                value=\"Sign in\"\r\n              />\r\n            </div>\r\n            <div className=\"lh-copy mt3\">\r\n              <p  onClick={() => onRouteChange('register')} className=\"f6 link dim black db pointer\">Register</p>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signin;","import React from 'react';\r\n\r\nclass Register extends React.Component {\r\n\t\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\temail: '',\r\n\t\t\tpassword: '',\r\n\t\t\tname: ''\r\n\t\t}\r\n\t}\r\n\tonNameChange = (event) => {\r\n\t\tthis.setState({name: event.target.value})\r\n}\r\n\r\n\tonEmailChange = (event) => {\r\n\t\tthis.setState({email: event.target.value})\r\n}\r\n\r\n\tonPasswordChange = (event) => {\r\n\t\tthis.setState({password: event.target.value})\r\n}\r\n\r\nonSubmitSignIn = () => {\r\n\tfetch('https://radiant-sierra-05045.herokuapp.com/register', {\r\n\t\tmethod: 'post',\r\n\t\theaders: {'Content-Type': 'application/json'},\r\n\t\tbody: JSON.stringify({\r\n\t\t\temail: this.state.email,\r\n\t\t\tpassword: this.state.password,\r\n\t\t\tname: this.state.name\r\n\t\t})\r\n\t}).then(response => response.json())\r\n\t.then(user => {\r\n\t\tif (user.id) {\r\n\t\t\tthis.props.loadUser(user)\r\n\t\t\tthis.props.onRouteChange('home');\r\n\t\t}\r\n\t})\r\n}\r\n\trender() {\r\n\t\treturn (\r\n\t\t<article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\r\n\t\t\t<main className=\"pa4 black-80\">\r\n\t\t\t  <div className=\"measure\">\r\n\t\t\t    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n\t\t\t      <legend className=\"f1 fw6 ph0 mh0\">Register</legend>\r\n\t\t\t      <div className=\"mt3\">\r\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"name\">Name</label>\r\n\t\t\t        <input \r\n\t\t\t        className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t        type=\"text\" \r\n\t\t\t        name=\"name\"  \r\n\t\t\t        id=\"name\"\r\n\t\t\t        onChange={this.onNameChange} \r\n\t\t\t        />\r\n\t\t\t      </div>\r\n\t\t\t      <div className=\"mt3\">\r\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"email-address\">Email</label>\r\n\t\t\t        <input \r\n\t\t\t        className=\"pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t        type=\"email\" \r\n\t\t\t        name=\"email-address\"  \r\n\t\t\t        id=\"email-address\"\r\n\t\t\t        onChange={this.onEmailChange}\r\n\t\t\t         />\r\n\t\t\t        \r\n\t\t\t      </div>\r\n\t\t\t      <div className=\"mv3\">\r\n\t\t\t        <label className=\"db fw6 lh-copy f6\" htmlFor=\"password\">Password</label>\r\n\t\t\t        <input \r\n\t\t\t        className=\"b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100\" \r\n\t\t\t        type=\"password\" \r\n\t\t\t        name=\"password\"  \r\n\t\t\t        id=\"password\"\r\n\t\t\t        onChange = {this.onPasswordChange} \r\n\t\t\t        />\r\n\t\t\t      </div>\r\n\t\t\t    </fieldset>\r\n\t\t\t    <div className=\"\">\r\n\t\t\t      <input \r\n\t\t\t      \tonClick = {this.onSubmitSignIn}\r\n\t\t\t      \tclassName=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" type=\"submit\" value=\"Register\" />\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t\t</main>\r\n\t\t</article>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './Logo.css';\r\nimport brain from './brain.png';\r\n\r\nconst Logo = () => {\r\n\treturn (\r\n\t\t<div className='ma4 mt0'>\r\n\t\t\t<Tilt className=\"Tilt br2 shadow-2\" options={{ max : 55 }} style={{ height: 150, width: 150 }} >\r\n\t \t\t\t<div className=\"Tilt-inner pa3\"><img style={{paddingTop: '5px'}} alt='logo' src={brain}/></div>\r\n\t\t\t</Tilt>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p className ='f3'>\r\n\t\t\t{'This Magic Brain will detect faces in your pucture. Try uploading an image.'}\r\n\t\t\t</p>\r\n\t\t\t<div className='center'>\r\n\t\t\t\t<div className=' form center pa4 br3 shadow-5'>\r\n\t\t\t\t\t<input className='f4 pa2 w-70 center' type='text' onChange={onInputChange}/>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\r\n\t\t\t\t\t\tonClick={onButtonSubmit}\r\n\t\t\t\t\t\t>Detect</button>\r\n\t\t\t\t</div>\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default ImageLinkForm;","import React from 'react';\r\n\r\nconst Rank = ({name, entries}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className='white f3'>\r\n\t\t\t\t{`${name}, your entry count is... `}\r\n\t\t\t</div>\r\n\t\t\t<div className='white f1'>\r\n\t\t\t\t{entries}\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Rank;","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport Signin from './components/Signin/Signin';\r\nimport Register from './components/Register/Register';\r\nimport Logo from './components/Logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport './App.css';\r\n\r\n\r\n\r\nconst particlesOptions = {\r\n  particles: {\r\n    number: {\r\n      value: 80,\r\n      density: {\r\n        enable: true,\r\n        value_area: 800\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst initialState = {\r\n  input: '',\r\n  imageUrl: '',\r\n  box: {},\r\n  route: 'signin',\r\n  isSignedIn: false,\r\n  user: {\r\n    id: '',\r\n     name: '',\r\n     email: '',\r\n     entries: 0,\r\n     joined: ''\r\n  }\r\n}\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state =initialState;\r\n  }\r\n\r\n  loadUser = (data) => {\r\n    this.setState({user: {\r\n      id: data.id,\r\n      name: data.name,\r\n      email: data.email,\r\n      entries: data.entries,\r\n      joined: data.joined\r\n    }})\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.getElementById('inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    this.setState({box: box});\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({input: event.target.value});\r\n  }\r\n\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input});\r\n       fetch('https://radiant-sierra-05045.herokuapp.com/imageurl', {\r\n            method: 'post',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n              input: this.state.input\r\n            })\r\n          })\r\n       .then(response => response.json())\r\n      .then(response => {\r\n        if (response) {\r\n          fetch('https://radiant-sierra-05045.herokuapp.com/image', {\r\n            method: 'put',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({\r\n              id: this.state.user.id\r\n            })\r\n          })\r\n            .then(response => response.json())\r\n            .then(count => {\r\n              this.setState(Object.assign(this.state.user, { entries: count}))\r\n            })\r\n            .catch(console.log)\r\n        }\r\n        this.displayFaceBox(this.calculateFaceLocation(response))\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  onRouteChange = (route) => {\r\n    if (route === 'signout') {\r\n      this.setState(initialState)\r\n    } else if (route === 'home') {\r\n      this.setState({isSignedIn: true})\r\n    }\r\n    this.setState({route: route});\r\n  }\r\n\r\n  render() {\r\n    const { isSignedIn, imageUrl, route, box } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n         <Particles className='particles'\r\n          params={particlesOptions}\r\n        />\r\n        <Navigation isSignedIn={isSignedIn} onRouteChange={this.onRouteChange} />\r\n        { route === 'home'\r\n          ? <div>\r\n              <Logo />\r\n              <Rank\r\n                name={this.state.user.name}\r\n                entries={this.state.user.entries}\r\n              />\r\n              <ImageLinkForm\r\n                onInputChange={this.onInputChange}\r\n                onButtonSubmit={this.onButtonSubmit}\r\n              />\r\n              <FaceRecognition box={box} imageUrl={imageUrl} />\r\n            </div>\r\n          : (\r\n             route === 'signin'\r\n             ? <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\r\n             : <Register loadUser={this.loadUser} onRouteChange={this.onRouteChange}/>\r\n            )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport'tachyons';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain.a3d88aed.png\";"],"sourceRoot":""}